o(2n)//because we trverse the whole string with i pointer and j pointer
o(n)
brtue
int lengthOfLongestSubstring(string s) {
        int i=0;
        int j=0;
        set<char>st;
        int max=0;
        while(i<s.size())
        {
            auto it= st.find(s[i]);
            if(it==st.end())
            {
                if(i-j+1>max)
                {
                    max=i-j+1;
                }
                st.insert(s[i]);
                i++;
            }
            else
            {
                st.erase(s[j]);
                j++;
            }
        }
        return max;
    }
o(n)
o(n)
int lengthOfLongestSubstring(string s) {
        map<char,int>mp;
        int left=0;
        int right=0;
        int ans=0;
        int n=s.size();
        while(right<n)
        {
            if(mp.find(s[right])!=mp.end())
            {
                left=max(mp[s[right]]+1,left);
            }
            mp[s[right]]=right;
            ans=max(ans,right-left+1);
            right++;
        }
        return ans;
    }
input =abcabcbba
output=3
